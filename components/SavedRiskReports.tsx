'use client';

import { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { FileText, AlertTriangle, ExternalLink, Download } from 'lucide-react';
import { supabase } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from '@/components/ui/dialog';
import { MarkdownRenderer } from '@/components/MarkdownRenderer';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/lib/AuthContext';

interface SavedRiskReport {
  id: string;
  project_id: number;
  risk_score: number;
  full_report: string;
  mitigation_measures: string[];
  created_by: string;
  created_at: string;
}

interface SavedRiskReportsProps {
  projectId: number;
}

export default function SavedRiskReports({ projectId }: SavedRiskReportsProps) {
  const [reports, setReports] = useState<SavedRiskReport[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedReport, setSelectedReport] = useState<SavedRiskReport | null>(null);
  const { toast } = useToast();
  const { isAdmin } = useAuth();

  // Function to fetch saved risk reports from the database using useCallback
  const fetchSavedReports = useCallback(async () => {
    setLoading(true);
    setError(null);

    try {
      const { data, error } = await supabase
        .from('project_risk_reports')
        .select('*')
        .eq('project_id', projectId)
        .order('created_at', { ascending: false });

      if (error) {
        throw new Error(`Database error: ${error.message}`);
      }

      setReports(data || []);
    } catch (error) {
      console.error('Failed to fetch saved risk reports:', error);
      setError(error instanceof Error ? error.message : 'Unknown error');
      setReports([]);
    } finally {
      setLoading(false);
    }
  }, [projectId]);

  useEffect(() => {
    // Only fetch reports if the user is an admin
    if (isAdmin) {
      fetchSavedReports();
    }
  }, [isAdmin, fetchSavedReports]);

  // Return null if user is not an admin
  if (!isAdmin) return null;

  // Function to get color based on risk score
  const getRiskScoreColor = (score: number) => {
    if (score < 30) return 'bg-green-100 text-green-800';
    if (score < 70) return 'bg-amber-100 text-amber-800';
    return 'bg-red-100 text-red-800';
  };

  // Function to format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  // Function to download the selected report
  const downloadReport = () => {
    if (!selectedReport) return;
    
    // Format the report content
    const content = `# Risk Assessment Report for Project ID: ${selectedReport.project_id}

## Risk Score: ${selectedReport.risk_score}/100
## Generated by: ${selectedReport.created_by}
## Date: ${formatDate(selectedReport.created_at)}

${selectedReport.full_report}
`;
    
    // Create a Blob with the content
    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    
    // Create a link element and trigger download
    const link = document.createElement('a');
    link.href = url;
    link.download = `risk-report-${selectedReport.project_id}-${new Date(selectedReport.created_at).toISOString().split('T')[0]}.md`;
    document.body.appendChild(link);
    link.click();
    
    // Clean up
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    toast({
      title: 'Success',
      description: 'Risk report downloaded successfully',
    });
  };

  if (loading) {
    return (
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>Saved Risk Reports</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-center text-muted-foreground py-4">Loading saved reports...</p>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>Saved Risk Reports</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="bg-red-50 border border-red-200 rounded-md p-4 flex items-start">
            <AlertTriangle className="h-5 w-5 text-red-600 mt-0.5 mr-2" />
            <div>
              <p className="text-red-800 font-medium">Failed to load saved reports</p>
              <p className="text-red-700 text-sm mt-1">{error}</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card className="mt-6">
        <CardHeader>
          <CardTitle className="flex items-center">
            <FileText className="h-5 w-5 mr-2" />
            Saved Risk Reports
          </CardTitle>
        </CardHeader>
        <CardContent>
          {reports.length === 0 ? (
            <p className="text-center text-muted-foreground py-4">No saved risk reports yet.</p>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => (
                <div 
                  key={report.id} 
                  className="border rounded-md p-4 hover:bg-slate-50 cursor-pointer transition-colors"
                  onClick={() => setSelectedReport(report)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <Badge className={getRiskScoreColor(report.risk_score)}>
                        Risk Score: {report.risk_score}/100
                      </Badge>
                      <span className="ml-4 text-sm text-muted-foreground">
                        {formatDate(report.created_at)}
                      </span>
                    </div>
                    <span className="text-sm text-muted-foreground">
                      By: {report.created_by}
                    </span>
                  </div>
                  <div className="mt-2 text-sm line-clamp-2 text-muted-foreground">
                    {report.full_report.substring(0, 150)}...
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Report Detail Dialog */}
      <Dialog 
        open={selectedReport !== null} 
        onOpenChange={(open) => !open && setSelectedReport(null)}
      >
        <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Risk Report Details</DialogTitle>
            <DialogDescription>
              Generated on {selectedReport && formatDate(selectedReport.created_at)} by {selectedReport?.created_by}
            </DialogDescription>
          </DialogHeader>
          
          {selectedReport && (
            <div className="space-y-6 py-4">
              <div className="flex justify-between items-center border-b pb-2">
                <h3 className="font-semibold text-lg">Risk Score</h3>
                <div className={`text-3xl font-bold ${
                  selectedReport.risk_score < 30 ? 'text-green-600' : 
                  selectedReport.risk_score < 70 ? 'text-amber-600' : 
                  'text-red-600'
                }`}>
                  {selectedReport.risk_score}/100
                </div>
              </div>
              
              {Array.isArray(selectedReport.mitigation_measures) && selectedReport.mitigation_measures.length > 0 && (
                <div>
                  <h3 className="font-semibold mb-2">Key Mitigation Measures:</h3>
                  <ul className="space-y-3">
                    {selectedReport.mitigation_measures.map((measure, index) => (
                      <li key={index} className="pl-2 border-l-2 border-green-500">
                        <div className="flex-1 pl-2">
                          <MarkdownRenderer content={measure} />
                        </div>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              
              <div>
                <h3 className="font-semibold mb-2">Full Report:</h3>
                <div className="border rounded p-4 bg-slate-50 overflow-y-auto max-h-[400px]">
                  <div className="mb-2">
                    <MarkdownRenderer content={selectedReport.full_report} />
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setSelectedReport(null)}
            >
              Close
            </Button>
            <Button
              variant="outline"
              onClick={downloadReport}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
} 